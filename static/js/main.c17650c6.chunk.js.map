{"version":3,"sources":["serviceWorker.js","SElement.js","row.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","unregister","navigator","serviceWorker","ready","then","registration","catch","error","console","message","SingleElement","children","rest","className","Row","value","App","style","textAlign","display","justifyContent","id","ReactDOM","render","StrictMode","document","getElementById","screen","querySelector","opcodes","btns","querySelectorAll","exp","handleCalculation","e","innerHTML","eval","slice","length","includes","forEach","event","addEventListener","target","key"],"mappings":"4HAAA,kCAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAgHC,SAASC,IACV,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaL,gBAEdM,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c,wDCnIbC,MAJf,YAA+C,IAAtBC,EAAqB,EAArBA,SAAaC,EAAQ,4BAC5C,OAAO,yCAASA,EAAT,CAAeC,UAAU,MAAMF,SAAUA,MCWnCG,MAXf,YAAkC,IAAnBC,EAAkB,EAAlBA,MAAUH,EAAQ,yBAC/B,OACE,yBAAKC,UAAU,aACb,kBAAC,EAAD,iBAAeD,EAAf,CAAqBD,SAAUI,EAAM,MACrC,kBAAC,EAAD,iBAAeH,EAAf,CAAqBD,SAAUI,EAAM,MACrC,kBAAC,EAAD,iBAAeH,EAAf,CAAqBD,SAAUI,EAAM,MACrC,kBAAC,EAAD,iBAAeH,EAAf,CAAqBD,SAAUI,EAAM,Q,MC4B5BC,IAjCf,WAOE,OACE,yBAAKH,UAAU,OACb,yBAAKA,UAAU,cACb,yBACEA,UAAU,aACVI,MAAO,CACLC,UAAW,SACXC,QAAS,OACTC,eAAgB,WAGlB,2CAEF,yBAAKP,UAAU,mBACb,wBAAIQ,GAAG,OAAP,MAEF,kBAAC,EAAD,CAAKR,UAAU,MAAME,MAtBhB,CAAC,IAAK,IAAK,MAAO,OAuBvB,kBAAC,EAAD,CAAKF,UAAU,MAAME,MAtBhB,CAAC,IAAK,IAAK,IAAK,OAuBrB,kBAAC,EAAD,CAAKF,UAAU,MAAME,MAtBhB,CAAC,IAAK,IAAK,IAAK,OAuBrB,kBAAC,EAAD,CAAKF,UAAU,MAAME,MAtBhB,CAAC,IAAK,IAAK,IAAK,OAuBrB,kBAAC,EAAD,CAAKF,UAAU,MAAME,MAtBhB,CAAC,IAAK,IAAK,IAAK,W,sGCT7B,oqBAMAO,iDAASC,OACP,2DAAC,6CAAMC,WAAP,KACE,2DAAC,oCAAD,OAEFC,SAASC,eAAe,SAE1BxB,gDACA,IAAMyB,OAASF,SAASG,cAAc,QAChCC,QAAU,CACd,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,KAEIC,KAAOL,SAASM,iBAAiB,QACnCC,IAAM,GAEJC,kBAAoB,SAApBA,kBAAqBC,GACf,MAANA,GAAmB,UAANA,EACFP,OAAOQ,UAAZ,IAARH,IAAgC,EAAyBI,KAAKJ,KAC/C,QAANE,GACTF,IAAG,SAAGI,KAAKJ,KAAQ,GACnBL,OAAOQ,UAAYH,KACJ,MAANE,GAAmB,cAANA,GACtBF,IAAMA,IAAIK,MAAM,EAAGL,IAAIM,OAAS,GAChCX,OAAOQ,UAAYH,KACJ,MAANE,GAAmB,WAANA,GACtBF,IAAM,GACNL,OAAOQ,UAAY,GACVN,QAAQU,SAASL,KAC1BF,KAAOE,EACPP,OAAOQ,UAAYH,MAIvBF,KAAKU,SAAQ,SAACC,GACZA,EAAMC,iBAAiB,SAAS,SAACR,GAC/BD,kBAAkBC,EAAES,OAAOR,iBAI/BvC,OAAO8C,iBAAiB,WAAW,YAAc,IAAXE,EAAU,EAAVA,IACpCX,kBAAkBW,O","file":"static/js/main.c17650c6.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\n\r\nfunction SingleElement({ children, ...rest }) {\r\n  return <div {...rest} className=\"btn\" children={children} />;\r\n}\r\n\r\nexport default SingleElement;\r\n","import React from \"react\";\r\nimport SingleRow from \"./SElement\";\r\n\r\nfunction Row({ value, ...rest }) {\r\n  return (\r\n    <div className=\"row-1 row\">\r\n      <SingleRow {...rest} children={value[0]} />\r\n      <SingleRow {...rest} children={value[1]} />\r\n      <SingleRow {...rest} children={value[2]} />\r\n      <SingleRow {...rest} children={value[3]} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Row;\r\n","import React from \"react\";\r\nimport Row from \"./row\";\r\nimport \"./App.css\";\r\n\r\nfunction App() {\r\n  const r0 = [\"D\", \"%\", \"x^2\", \"/\"];\r\n  const r1 = [\"7\", \"8\", \"9\", \"*\"];\r\n  const r2 = [\"4\", \"5\", \"6\", \"-\"];\r\n  const r3 = [\"1\", \"2\", \"3\", \"+\"];\r\n  const r4 = [\"C\", \"0\", \".\", \"=\"];\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"calculator\">\r\n        <div\r\n          className=\"row screen\"\r\n          style={{\r\n            textAlign: \"center\",\r\n            display: \"flex\",\r\n            justifyContent: \"center\",\r\n          }}\r\n        >\r\n          <h1>Calculator</h1>\r\n        </div>\r\n        <div className=\"row scal screen\">\r\n          <h1 id=\"cal\">0</h1>\r\n        </div>\r\n        <Row className=\"btn\" value={r0} />\r\n        <Row className=\"btn\" value={r1} />\r\n        <Row className=\"btn\" value={r2} />\r\n        <Row className=\"btn\" value={r3} />\r\n        <Row className=\"btn\" value={r4} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\nserviceWorker.unregister();\r\nconst screen = document.querySelector(\"#cal\");\r\nconst opcodes = [\r\n  \"0\",\r\n  \"1\",\r\n  \"2\",\r\n  \"3\",\r\n  \"4\",\r\n  \"5\",\r\n  \"6\",\r\n  \"7\",\r\n  \"8\",\r\n  \"9\",\r\n  \"C\",\r\n  \"D\",\r\n  \"+\",\r\n  \"-\",\r\n  \"*\",\r\n  \"/\",\r\n  \".\",\r\n  \"%\",\r\n];\r\nconst btns = document.querySelectorAll(\".btn\");\r\nlet exp = \"\";\r\n\r\nconst handleCalculation = (e) => {\r\n  if (e === \"=\" || e === \"Enter\") {\r\n    exp === 0 ? (screen.innerHTML = 0) : (screen.innerHTML = eval(exp));\r\n  } else if (e === \"x^2\") {\r\n    exp = eval(exp) ** 2;\r\n    screen.innerHTML = exp;\r\n  } else if (e === \"D\" || e === \"Backspace\") {\r\n    exp = exp.slice(0, exp.length - 1);\r\n    screen.innerHTML = exp;\r\n  } else if (e === \"C\" || e === \"Escape\") {\r\n    exp = \"\";\r\n    screen.innerHTML = 0;\r\n  } else if (opcodes.includes(e)) {\r\n    exp += e;\r\n    screen.innerHTML = exp;\r\n  }\r\n};\r\n\r\nbtns.forEach((event) => {\r\n  event.addEventListener(\"click\", (e) => {\r\n    handleCalculation(e.target.innerHTML);\r\n  });\r\n});\r\n\r\nwindow.addEventListener(\"keydown\", ({ key }) => {\r\n  handleCalculation(key);\r\n});\r\n"],"sourceRoot":""}