{"version":3,"sources":["serviceWorker.js","SElement.js","row.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","unregister","navigator","serviceWorker","ready","then","registration","catch","error","console","message","SingleElement","children","rest","className","Row","value","App","style","textAlign","display","justifyContent","id","ReactDOM","render","StrictMode","document","getElementById","screen","querySelector","opcodes","btns","querySelectorAll","exp","handleCalculation","e","innerHTML","eval","slice","length","includes","forEach","event","addEventListener","target","key"],"mappings":"4HAAA,kCAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAgHC,SAASC,IACV,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaL,gBAEdM,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c,wDCnIbC,MAJf,YAA+C,IAAtBC,EAAqB,EAArBA,SAAaC,EAAQ,4BAC5C,OAAO,yCAASA,EAAT,CAAeC,UAAU,MAAMF,SAAUA,MCWnCG,MAXf,YAAkC,IAAnBC,EAAkB,EAAlBA,MAAUH,EAAQ,yBAC/B,OACE,yBAAKC,UAAU,aACb,kBAAC,EAAD,iBAAeD,EAAf,CAAqBD,SAAUI,EAAM,MACrC,kBAAC,EAAD,iBAAeH,EAAf,CAAqBD,SAAUI,EAAM,MACrC,kBAAC,EAAD,iBAAeH,EAAf,CAAqBD,SAAUI,EAAM,MACrC,kBAAC,EAAD,iBAAeH,EAAf,CAAqBD,SAAUI,EAAM,Q,MC4B5BC,IAjCf,WAOE,OACE,yBAAKH,UAAU,OACb,yBAAKA,UAAU,cACb,yBACEA,UAAU,aACVI,MAAO,CACLC,UAAW,SACXC,QAAS,OACTC,eAAgB,WAGlB,2CAEF,yBAAKP,UAAU,mBACb,wBAAIQ,GAAG,OAAP,MAEF,kBAAC,EAAD,CAAKR,UAAU,MAAME,MAtBhB,CAAC,IAAK,IAAK,MAAO,OAuBvB,kBAAC,EAAD,CAAKF,UAAU,MAAME,MAtBhB,CAAC,IAAK,IAAK,IAAK,OAuBrB,kBAAC,EAAD,CAAKF,UAAU,MAAME,MAtBhB,CAAC,IAAK,IAAK,IAAK,OAuBrB,kBAAC,EAAD,CAAKF,UAAU,MAAME,MAtBhB,CAAC,IAAK,IAAK,IAAK,OAuBrB,kBAAC,EAAD,CAAKF,UAAU,MAAME,MAtBhB,CAAC,IAAK,IAAK,IAAK,W,sGCT7B,oqBAMAO,iDAASC,OACP,2DAAC,6CAAMC,WAAP,KACE,2DAAC,oCAAD,OAEFC,SAASC,eAAe,SAE1BxB,gDACA,IAAMyB,OAASF,SAASG,cAAc,QAChCC,QAAU,CACd,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,KAEIC,KAAOL,SAASM,iBAAiB,QACnCC,IAAM,GAEJC,kBAAoB,SAApBA,kBAAqBC,GACf,MAANA,GAAmB,UAANA,EACFP,OAAOQ,UAAZ,IAARH,IAAgC,EAAyBI,KAAKJ,KAC/C,QAANE,GACTF,IAAG,SAAGI,KAAKJ,KAAQ,GACnBL,OAAOQ,UAAYH,KACJ,MAANE,GAAmB,cAANA,GACtBF,IAAMA,IAAIK,MAAM,EAAGL,IAAIM,OAAS,GAChCX,OAAOQ,UAAYH,KACJ,MAANE,GAAmB,WAANA,GACtBF,IAAM,GACNL,OAAOQ,UAAY,GACVN,QAAQU,SAASL,KAC1BF,KAAOE,EACPP,OAAOQ,UAAYH,MAIvBF,KAAKU,SAAQ,SAACC,GACZA,EAAMC,iBAAiB,SAAS,SAACR,GAC/BD,kBAAkBC,EAAES,OAAOR,iBAI/BvC,OAAO8C,iBAAiB,WAAW,YAAc,IAAXE,EAAU,EAAVA,IACpCX,kBAAkBW,O","file":"static/js/main.977ca7bd.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\r\n\r\nfunction SingleElement({ children, ...rest }) {\r\n  return <div {...rest} className=\"btn\" children={children} />;\r\n}\r\n\r\nexport default SingleElement;\r\n","import React from \"react\";\r\nimport SingleRow from \"./SElement\";\r\n\r\nfunction Row({ value, ...rest }) {\r\n  return (\r\n    <div className=\"row-1 row\">\r\n      <SingleRow {...rest} children={value[0]} />\r\n      <SingleRow {...rest} children={value[1]} />\r\n      <SingleRow {...rest} children={value[2]} />\r\n      <SingleRow {...rest} children={value[3]} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Row;\r\n","import React from \"react\";\nimport Row from \"./row\";\nimport \"./App.css\";\n\nfunction App() {\n  const r0 = [\"D\", \"%\", \"x^2\", \"/\"];\n  const r1 = [\"7\", \"8\", \"9\", \"*\"];\n  const r2 = [\"4\", \"5\", \"6\", \"-\"];\n  const r3 = [\"1\", \"2\", \"3\", \"+\"];\n  const r4 = [\"C\", \"0\", \".\", \"=\"];\n\n  return (\n    <div className=\"App\">\n      <div className=\"calculator\">\n        <div\n          className=\"row screen\"\n          style={{\n            textAlign: \"center\",\n            display: \"flex\",\n            justifyContent: \"center\",\n          }}\n        >\n          <h1>Calculator</h1>\n        </div>\n        <div className=\"row scal screen\">\n          <h1 id=\"cal\">0</h1>\n        </div>\n        <Row className=\"btn\" value={r0} />\n        <Row className=\"btn\" value={r1} />\n        <Row className=\"btn\" value={r2} />\n        <Row className=\"btn\" value={r3} />\n        <Row className=\"btn\" value={r4} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\nserviceWorker.unregister();\nconst screen = document.querySelector(\"#cal\");\nconst opcodes = [\n  \"0\",\n  \"1\",\n  \"2\",\n  \"3\",\n  \"4\",\n  \"5\",\n  \"6\",\n  \"7\",\n  \"8\",\n  \"9\",\n  \"C\",\n  \"D\",\n  \"+\",\n  \"-\",\n  \"*\",\n  \"/\",\n  \".\",\n  \"%\",\n];\nconst btns = document.querySelectorAll(\".btn\");\nlet exp = \"\";\n\nconst handleCalculation = (e) => {\n  if (e === \"=\" || e === \"Enter\") {\n    exp === 0 ? (screen.innerHTML = 0) : (screen.innerHTML = eval(exp));\n  } else if (e === \"x^2\") {\n    exp = eval(exp) ** 2;\n    screen.innerHTML = exp;\n  } else if (e === \"D\" || e === \"Backspace\") {\n    exp = exp.slice(0, exp.length - 1);\n    screen.innerHTML = exp;\n  } else if (e === \"C\" || e === \"Escape\") {\n    exp = \"\";\n    screen.innerHTML = 0;\n  } else if (opcodes.includes(e)) {\n    exp += e;\n    screen.innerHTML = exp;\n  }\n};\n\nbtns.forEach((event) => {\n  event.addEventListener(\"click\", (e) => {\n    handleCalculation(e.target.innerHTML);\n  });\n});\n\nwindow.addEventListener(\"keydown\", ({ key }) => {\n  handleCalculation(key);\n});\n"],"sourceRoot":""}